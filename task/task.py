import pandas as pd
import numpy as np

df = pd.read_csv('/task/orders.csv')
df.head()

column_mapping = {
    'Order Number': 'order_id',
    'Order Date': 'order_date',
    'Item Name': 'product_name',
    'Quantity': 'quantity',
    'Product Price': 'product_price',
    'Total products': 'total_products'
}

df.rename(columns=column_mapping, inplace=True)

df.head()

unique_products = df['product_name'].unique()

# Create a mapping from product names to product IDs
product_id_mapping = {product: idx + 1 for idx, product in enumerate(unique_products)}

# Add a new column 'product_id' based on the product_name
df['product_id'] = df['product_name'].map(product_id_mapping)

df.columns

# Step 1: Generate hypothetical customer IDs
num_customers = 100  # Adjust this number based on the desired number of unique customers
customer_ids = [f'cust_{i:04d}' for i in range(num_customers)]

# Step 2: Map order IDs to customer IDs
order_ids = df['order_id'].unique()
num_orders = len(order_ids)

# Ensure some customers are repeated
assigned_customer_ids = np.random.choice(customer_ids, size=num_orders, replace=True)

# Create a dictionary mapping order_id to customer_id
order_to_customer_map = dict(zip(order_ids, assigned_customer_ids))

# Step 3: Assign customer IDs to the dataset
df['customer_id'] = df['order_id'].map(order_to_customer_map)

# Display the updated dataset
df.head(10)


# Rearranging the columns as specified
df = df[['order_id', 'customer_id', 'order_date', 'product_name', 'product_price', 'quantity']]

# Display the first few rows to confirm the column order
df.head(10)


# Data Cleaning

# Checking for missing values in the dataset
missing_values = df.isnull().sum()

# Checking for duplicate rows in the dataset
duplicate_rows = df.duplicated().sum()

# Displaying the results
missing_values, duplicate_rows

# Converting order_date to datetime format
df['order_date'] = pd.to_datetime(df['order_date'], errors='coerce')

# Checking if the conversion resulted in any NaT values, which would indicate conversion issues
date_conversion_issues = df['order_date'].isna().sum()

# Checking for negative or zero values in 'product_price' and 'quantity'
negative_product_price = df[df['product_price'] <= 0].shape[0]
negative_quantity = df[df['quantity'] <= 0].shape[0]

# Display the results
date_conversion_issues, negative_product_price, negative_quantity


df.head()

df.to_csv('orders_rearranged.csv', index=False)

# Task 1

# Convert 'order_date' to datetime format
df['order_date'] = pd.to_datetime(df['order_date'])

# Calculate total revenue for each order line
df['total_revenue'] = df['product_price'] * df['quantity']

# Extract month and year from 'order_date'
df['month_year'] = df['order_date'].dt.to_period('M')

# Group by month_year and sum the total_revenue
monthly_revenue = df.groupby('month_year')['total_revenue'].sum().reset_index()

# Display the monthly revenue
print(monthly_revenue)

# Task 2

# Group by product_name and sum the total_revenue to get the revenue generated by each product
product_revenue = df.groupby('product_name')['total_revenue'].sum().reset_index()

# Sort the result by total_revenue in descending order
product_revenue = product_revenue.sort_values(by='total_revenue', ascending=False)

# Display the product revenue
product_revenue

# Task 3

# Group by customer_id and sum the total_revenue to get the revenue generated by each customer
customer_revenue = df.groupby('customer_id')['total_revenue'].sum().reset_index()

# Sort the result by total_revenue in descending order
customer_revenue = customer_revenue.sort_values(by='total_revenue', ascending=False)

customer_revenue

# Task 4

# Group by customer_id and sum the total_revenue to get the revenue generated by each customer
customer_revenue = df.groupby('customer_id')['total_revenue'].sum().reset_index()

# Sort the result by total_revenue in descending order
customer_revenue = customer_revenue.sort_values(by='total_revenue', ascending=False)

# Select the top 10 customers by revenue
top_10_customers = customer_revenue.head(10)

# Display the top 10 customers
print(top_10_customers)